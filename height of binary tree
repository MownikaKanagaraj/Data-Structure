#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node
typedef struct TreeNode {
    int value;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

// Function to create a new tree node
TreeNode* createNode(int value) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to find the depth of a binary tree
int findDepth(TreeNode* root) {
    if (root == NULL) {
        return -1; // return -1 if depth is defined as number of edges
        // return 0; // return 0 if depth is defined as number of nodes
    }
    
    int leftDepth = findDepth(root->left);
    int rightDepth = findDepth(root->right);
    
    // The depth of the current node is 1 plus the maximum depth of its subtrees
    return (leftDepth > rightDepth ? leftDepth : rightDepth) + 1;
}

// Example usage
int main() {
    // Creating a binary tree:
    //      1
    //     / \
    //    2   3
    //   /
    //  4
    TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);

    printf("Depth of the binary tree: %d\n", findDepth(root));

    // Freeing allocated memory (not shown for brevity)
    // A function to free the binary tree nodes would be needed here

    return 0;
}
