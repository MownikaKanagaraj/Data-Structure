#include <stdio.h>
#include <stdlib.h>
#include <limits.h> // For INT_MAX and INT_MIN

typedef struct TreeNode {
    int value;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

TreeNode* createNode(int value) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

TreeNode* insert(TreeNode* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }

    if (value < root->value) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    
    return root;
}

int findMin(TreeNode* root) {
    if (root == NULL) {
        return INT_MAX; // Return max int value if tree is empty
    }

    while (root->left != NULL) {
        root = root->left;
    }

    return root->value;
}

int findMax(TreeNode* root) {
    if (root == NULL) {
        return INT_MIN; // Return min int value if tree is empty
    }

    while (root->right != NULL) {
        root = root->right;
    }

    return root->value;
}

int main() {
    TreeNode* root = NULL;
    int values[] = {5, 3, 7, 2, 4, 6, 8};
    int n = sizeof(values) / sizeof(values[0]);

    for (int i = 0; i < n; i++) {
        root = insert(root, values[i]);
    }

    int minValue = findMin(root);
    int maxValue = findMax(root);

    printf("Minimum value in the BST: %d\n", minValue);
    printf("Maximum value in the BST: %d\n", maxValue);

    return 0;
}
